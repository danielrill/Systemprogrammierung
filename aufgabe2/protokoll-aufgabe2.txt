daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ valgrind ./bubblesort 10
==20380== Memcheck, a memory error detector
==20380== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==20380== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==20380== Command: ./bubblesort 10
==20380== 
10 ganze Zahlen eingeben: 
23 45 674 66 33 77 12 652 773 9951
sortierte Zahlenfolge: 
12
23
33
45
66
77
652
674
773
9951
==20380== 
==20380== HEAP SUMMARY:
==20380==     in use at exit: 0 bytes in 0 blocks
==20380==   total heap usage: 3 allocs, 3 frees, 2,088 bytes allocated
==20380== 
==20380== All heap blocks were freed -- no leaks are possible
==20380== 
==20380== For lists of detected and suppressed errors, rerun with: -s
==20380== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ make cppcheck
cppcheck --enable=warning,style --std=c11 bubblesort.c
Checking bubblesort.c ...

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ make CC="g++ -fno-stack-protector" STD=c++11 clean bubblesort
rm -f bubblesort bubblesort.o
g++ -fno-stack-protector -Wall -Wextra -Werror -std=c++11 -pedantic    bubblesort.c   -o bubblesort

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Verhält sich das C-Programm bei allen EIngaben wie das Java-Programm ?

Nein, da char vom Typ int ist kann dies das herausfiltern einer reinen Zahlen-Eingabe erschweren
scanf("%d", &arr[i]) != 1); zeile41	-> Eingabe "Hallo" ist hier auch möglich, liefert dazu einen int wert.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Automatisierter Test:

tail liefert die letzen (in diesem Fall höchsten) PseudoZufallsZahlen des Seeds und speichert diese in die Datei out.txt
sort -n sortiert diese wiederum Anhand des numerischen Wertes
diff vergleicht die Datei Zeile für Zeile

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Laufzeitmessung:

daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ time java Bubblesort 1000 < /dev/null > /dev/null
user	0m0,158s

daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ time java Bubblesort 10000 < /dev/null > /dev/null
user	0m0,278s

daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ time java Bubblesort 100000 < /dev/null > /dev/null
user	0m9,725s

daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ time java Bubblesort 1000000 < /dev/null > /dev/null
^Z
[1]+  Angehalten              java Bubblesort 1000000 < /dev/null > /dev/null
real	10m51,219s



daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ time ./bubblesort 1000 < /dev/null > /dev/null
user	0m0,003s

daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ time ./bubblesort 10000 < /dev/null > /dev/null
user	0m0,230s

daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ time ./bubblesort 100000 < /dev/null > /dev/null
user	0m40,820s

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Optimiert:

daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ make "CC=gcc -g -O2" clean all
rm -f bubblesort bubblesort.o
gcc -g -O2 -Wall -Wextra -Werror -std=c11 -pedantic    bubblesort.c   -o bubblesort
daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ time ./bubblesort 100000 < /dev/null > /dev/null
user	0m20,593s

daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ time ./bubblesort 10000 < /dev/null > /dev/null
user	0m0,157s

daniel@Cliffhang3r:~/Schreibtisch/Sysprog/Aufgabe2$ time ./bubblesort 1000 < /dev/null > /dev/null
user	0m0,004s

Wächst die Ausführungszeit tatsächlich quadratisch mit der ArrayGröße ?
Ist das Java Programm oder das C-Programm schneller ?

Die Ausführungszeit wächst in etwa quadratisch.
Die Messungen zeigen das Java zunächst (bei kleinen Größen) langsamer ist als das C-programm. 
Ab einer Größe von 15000 jedoch erheblich schneller arbeitet.
Die Java virtual Machine optimiert den aus dem Bytecode erzeugten MaschinenCode passend für den 
jeweiligen Prozessor, Beim optimierten MaschinenCode werden bspw. die Laufvariablen in Prozessorregistern
statt im Hauptspeicher gehalten.
Dieselbe optimierung wird mithilfe -02 für den C-Code erzeugt.
Hier zeigt sich das der C-Code bereits bei einer Größe von 10000 beinahe doppelt so schnell arbeitet als der 
nicht optimierte C-Code.

Der Nachteil von Java bei kleinen Größen liegt evtl daran, dass Java von Grundauf einen viel größeren Speicherbereich
als C nutzt. Was bei dynamischen Arrays von Vorteil ist. Dynamische Arrays können einen erheblichen overhead erzeugen.

Für eine bessere Performance könnten Java ArrayList oder C++ STL vector hilfreich sein. 







