EDIT:
LaufzeitMessungen nach dem Feedback unter den vorherigen.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Geben sie als Länge m des Speicherstücks die Länge des Strings argv[1] inklusive Stringendezeichen '/0' an
Warum ist das ein sinnvoller wert ?
Es verhindert das Lesen über das Ende eines Strings hinweg (wenn die richtigen Funktionen verwendet werden
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		valgrind, cppcheck, g++::
		Alle ohne Warnungen und Fehlermeldungen.

$ make CC="g++ -fno-stack-protector" STD=c++11 clean stringsort-optimiert.c
rm -f stringsort stringsort.o

$ make CC="g++ -fno-stack-protector" STD=c++11 clean stringsort.c
rm -f stringsort stringsort.o


$ cppcheck --enable=warning,style --std=c11 stringsort-optimiert.c
Checking stringsort-optimiert.c ...

$ cppcheck --enable=warning,style --std=c11 stringsort.c
Checking stringsort.c ...
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
$ valgrind ./stringsort-optimiert 100
==9610== Memcheck, a memory error detector
==9610== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9610== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==9610== Command: ./stringsort-optimiert 100
==9610== 
unsortiertes Array:
56 56 76 13 99 83 76 26 68 7 64 10 28 66 85 21 90 16 33 53 17 46 93 56 55 0 2 49 95 57 74 3 65 50 17 64 85 45 42 5 52 6 16 81 24 1 54 15 69 40 68 86 38 61 94 45 14 96 94 61 5 20 64 22 70 33 87 7 78 29 13 83 88 81 16 12 34 70 27 3 62 47 41 0 61 87 45 75 35 91 88 93 11 52 15 33 38 2 41 16 
sortiertes Array:
0* 1 10 11 12 13* 14 15* 16*** 17* 2* 20 21 22 24 26 27 28 29 3* 33** 34 35 38* 40 41* 42 45** 46 47 49 5* 50 52* 53 54 55 56** 57 6 61** 62 64** 65 66 68* 69 7* 70* 74 75 76* 78 81* 83* 85* 86 87* 88* 90 91 93* 94* 95 96 99
==9610== 
==9610== HEAP SUMMARY:
==9610==     in use at exit: 0 bytes in 0 blocks
==9610==   total heap usage: 4 allocs, 4 frees, 1,828 bytes allocated
==9610== 
==9610== All heap blocks were freed -- no leaks are possible
==9610== 
==9610== For lists of detected and suppressed errors, rerun with: -s
==9610== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
$ valgrind ./stringsort 100
==9655== Memcheck, a memory error detector
==9655== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9655== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==9655== Command: ./stringsort 100
==9655== 
unsortiertes Array: 
80 40 6 88 80 23 23 63 44 46 34 51 63 99 55 48 90 86 79 81 66 90 69 67 7 15 4 65 57 10 76 89 50 34 29 30 57 4 94 54 50 28 5 14 27 12 62 70 98 41 3 16 83 73 84 90 40 40 56 49 51 84 38 1 19 67 32 76 71 78 82 22 58 87 88 37 52 50 7 2 43 63 19 26 88 3 69 28 95 77 78 98 61 16 0 80 36 84 9 7 
sortiertes Array:
0 1 10 12 14 15 16* 19* 2 22 23* 26 27 28* 29 3* 30 32 34* 36 37 38 4* 40** 41 43 44 46 48 49 5 50** 51* 52 54 55 56 57* 58 6 61 62 63** 65 66 67* 69* 7** 70 71 73 76* 77 78* 79 80** 81 82 83 84** 86 87 88** 89 9 90** 94 95 98* 99 
==9655== 
==9655== HEAP SUMMARY:
==9655==     in use at exit: 0 bytes in 0 blocks
==9655==   total heap usage: 103 allocs, 103 frees, 12,311 bytes allocated
==9655== 
==9655== All heap blocks were freed -- no leaks are possible
==9655== 
==9655== For lists of detected and suppressed errors, rerun with: -s
==9655== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		LaufzeitMessungen::
		
	
$ time ./stringsort-optimiert 30000 > /dev/null
user	0m6,142s

$ time ./stringsort-optimiert 20000 > /dev/null
user	0m4,472s

$ time ./stringsort-optimiert 2000 > /dev/null
user	0m0,040s

$ time ./stringsort-optimiert 200 > /dev/null
user	0m0,003s

$ time ./stringsort-optimiert 300 > /dev/null
user	0m0,002s

$ time ./stringsort-optimiert 400 > /dev/null
user	0m0,004s

$ time ./stringsort-optimiert 500 > /dev/null
user	0m0,004s


$ time ./stringsort 30000 > /dev/null
user	0m16,859s

$ time ./stringsort 20000 > /dev/null
user	0m13,350s

$ time ./stringsort 2000 > /dev/null
user	0m0,051s

$ time ./stringsort 200 > /dev/null
user	0m0,002s

$ time ./stringsort 300 > /dev/null
user	0m0,003s

$ time ./stringsort 400 > /dev/null
user	0m0,003s

$ time ./stringsort 500 > /dev/null
user	0m0,006s

Bei kleineren Arrays [200-300] liegen beide Programme in etwa gleich.
Bei einer Größe von etwa 500 ist das optimierte Programm jedoch schon um (einiges) schneller.
Bei sehr Großen Arrays ist das optimierte Programm deutlich schneller.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Laufzeit Messungen nach dem FeedBack:

time ./stringsort-optimiert 30000 > /dev/null
user	0m8,173s

time ./stringsort-optimiert 20000 > /dev/null
user	0m4,270s

time ./stringsort-optimiert 10000 > /dev/null
user	0m1,062s

time ./stringsort-optimiert 1000 > /dev/null
user	0m0,013s


time ./stringsort 30000 > /dev/null
user	0m10,251s

time ./stringsort 20000 > /dev/null
user	0m11,702s

time ./stringsort 10000 > /dev/null
user	0m1,859s

time ./stringsort 1000 > /dev/null
user	0m0,012s

Die stringsort Laufzeiten konnten noch um einiges verbessert werden.
stringsort-optimiert wurde für große Arrays etwas langsamer.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
$ make "CC=gcc -g -O2" clean all
rm -f stringsort stringsort.o
gcc -g -O2 -Wall -Wextra -Werror -std=c11 -pedantic    stringsort.c   -o stringsort

time ./stringsort 20000 > /dev/null
user	0m10,681s

time ./stringsort 2000 > /dev/null
user	0m0,026s

$ time ./stringsort 200 > /dev/null
user	0m0,003s

Eine optimierung von stringsort mittels -O2 bewirkte eine sehr beachtliche verbesserung für kleine Arrays, hier schlägt es die stringsort-optimiert variante bei weitem. Unterliegt jedoch weiterhin bei großen Arrays.
